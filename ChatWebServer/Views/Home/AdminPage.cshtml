@model List<ChatWebServer.Models.User>

@{
    ViewData["Title"] = "Admin Page";
}


@section NavbarLinks {
    <button type="button" class="btn btn-primary" id="openAdminModalBtn">Do Admin Stuff</button>
}
<div class="text-center">
    <div class="chat-container" id="msgs">
        <!-- Messages will be dynamically added here -->
    </div>

    <div id="inputBox">
        <input type="text" id="messageField" placeholder="Type a message and press Enter" />
    </div>

    <!-- Dialog for CRUD operations on User table -->
    <dialog id="manageUsersDialog">
        <div id="userList">
            @foreach (var user in Model)
            {
                <div class="user-box" onclick="expandUser(this)">
                    <p>@user.Username</p>
                    <div class="user-info" style="display: none;">
                        <p>ID: @user.UserID</p>
                        <p>Role: @user.Role</p>
                        <p>Active: @user.IsActive</p>
                        <button class="btn btn-primary btn-update" onclick="openUpdateUserDialog('@user.UserID', '@user.Username', '@user.Role', '@user.IsActive')">Update</button>
                        <button class="btn btn-danger btn-delete" onclick="deleteUser('@user.UserID')">Delete</button>
                    </div>
                </div>
            }
        </div>
        <button type="button" class="btn btn-primary" onclick="openAddUserDialog()">Add User</button>
        <form method="dialog" id="updateUserForm" style="display:none">
            <h4>Update User</h4>
            <input type="hidden" id="updateUserID">
            <div class="form-group">
                <label for="updateUsername">Username</label>
                <input type="text" class="form-control" id="updateUsername" placeholder="Enter username">
            </div>
            <div class="form-group">
                <label for="updateRole">Role</label>
                <select class="form-control" id="updateRole">
                    <option value="ADMIN">ADMIN</option>
                    <option value="USER">USER</option>
                </select>
            </div>
            <div class="form-group">
                <label for="updateIsActive">Active</label>
                <div class="checkbox-container">
                    <input type="checkbox" class="form-control" id="updateIsActive">
                    <span class="checkmark"></span>
                </div>
            </div>
            <button type="button" class="btn btn-primary" onclick="updateUser()">Update</button>
            <button type="button" class="btn btn-secondary" onclick="closeUpdateUserDialog()">Cancel</button>
        </form>

        <!-- New User Form -->
        <form method="dialog" id="addUserForm" style="display:none">
            <h4>Add User</h4>
            <div class="form-group">
                <label for="addUsername">Username</label>
                <input type="text" class="form-control" id="addUsername" placeholder="Enter username">
            </div>
            <div class="form-group">
                <label for="addPassword">Password</label>
                <input type="password" class="form-control" id="addPassword" placeholder="Enter password">
            </div>
            <div class="form-group">
                <label for="addRole">Role</label>
                <select class="form-control" id="addRole">
                    <option value="ADMIN">ADMIN</option>
                    <option value="USER">USER</option>
                </select>
            </div>
            <button type="button" class="btn btn-primary" onclick="addUser()">Add User</button>
            <button type="button" class="btn btn-secondary" onclick="closeAddUserDialog()">Cancel</button>
        </form>

        <button class="btn btn-secondary" onclick="closeManageUsersDialog()">Close</button>
    </dialog>
</div>


<script>
    var userName = @Json.Serialize(Context.User.Identity.Name);
    var currentUser = JSON.parse('@Html.Raw(ViewBag.SerializedCurrentUser)');

    const showButton = document.getElementById("openAdminModalBtn");
    const favDialog = document.getElementById("manageUsersDialog");

    showButton.addEventListener("click", () => {
        favDialog.showModal();
    });

    function closeManageUsersDialog() {
        document.getElementById("manageUsersDialog").close();
    }

    function expandUser(userBox) {
        const userInfo = userBox.querySelector(".user-info");
        userInfo.style.display = userInfo.style.display === "none" ? "block" : "none";
    }

    function openAddUserDialog() {
        document.getElementById("addUserForm").style.display = "block";
    }

    function closeAddUserDialog() {
        document.getElementById("addUserForm").style.display = "none";
    }

    // Update User: 

    function openUpdateUserDialog(userID, username, role, isActive) {
        document.getElementById("updateUserID").value = userID;
        document.getElementById("updateUsername").value = username;
        document.getElementById("updateRole").value = role;
        document.getElementById("updateIsActive").checked = isActive === "True";
        document.getElementById("updateUserForm").style.display = "block";
    }


    function closeUpdateUserDialog() {
        document.getElementById("updateUserForm").style.display = "none";
    }

    function updateUser() {
        const userID = document.getElementById("updateUserID").value;
        const username = document.getElementById("updateUsername").value;
        const role = document.getElementById("updateRole").value;
        const isActive = document.getElementById("updateIsActive").checked;

        const formData = new FormData();
        formData.append("UserID", userID);
        formData.append("Username", username);
        formData.append("Role", role);
        formData.append("IsActive", isActive);

        fetch("/Home/UpdateUser", {
            method: "POST",
            body: formData, 
        })
            .then(response => response.json())
            .then(data => {
                showSuccessToast("User updated successfully.");
                location.reload();
            })
            .catch(error => {
                console.error("Error updating user:", error);
                showErrorToast("Error updating user");
            });
    }

    // Delete User
    function deleteUser(userID) {
        if (confirm("Are you sure you want to delete this user?")) {
            const formData = new FormData();
            formData.append("userID", userID);

            fetch(`/Home/DeleteUser`, {
                method: "POST",
                body: formData,
            })
                .then(response => response.json())
            .then(data => {
                showSuccessToast("User deleted successfully.");
                location.reload();
            })
            .catch(error => {
                console.error("Error deleting user:", error);
                showErrorToast("Error deleting user.");
            });
        }
    }

    // Add User
    function openAddUserDialog() {
        document.getElementById("addUserForm").style.display = "block";
    }

    function closeAddUserDialog() {
        document.getElementById("addUserForm").style.display = "none";
    }

    function addUser() {
        const username = document.getElementById("addUsername").value;
        const password = document.getElementById("addPassword").value;
        const role = document.getElementById("addRole").value;

        const formData = new FormData();
        formData.append("username", username);
        formData.append("password", password);
        formData.append("role", role);

        fetch("/Home/AddUser", {
            method: "POST",
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                showSuccessToast("User added successfully.");
                location.reload();
            })
            .catch(error => {
                console.error("Error adding user:", error);
                showErrorToast("Error adding user.");
            });
    }

    // Toasts 

    // Function to show success toast
    function showSuccessToast(message) {
        Toastify({
            text: message,
            backgroundColor: "green",
            duration: 3000,
            close: true,
            gravity: "top", 
            position: "center", 
        }).showToast();
    }

    // Function to show error toast
    function showErrorToast(message) {
        Toastify({
            text: message,
            backgroundColor: "red",
            duration: 3000,
            close: true,
            gravity: "top", 
            position: "center", 
        }).showToast();
    }

</script>

